package cn.vove7.common.datamanager.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.vove7.common.datamanager.executor.entity.MarkedData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARKED_DATA".
*/
public class MarkedDataDao extends AbstractDao<MarkedData, Long> {

    public static final String TABLENAME = "MARKED_DATA";

    /**
     * Properties of entity MarkedData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property RegStr = new Property(3, String.class, "regStr", false, "REG_STR");
        public final static Property PublishUserId = new Property(4, Long.class, "publishUserId", false, "PUBLISH_USER_ID");
        public final static Property Value = new Property(5, String.class, "value", false, "VALUE");
        public final static Property From = new Property(6, String.class, "from", false, "FROM");
        public final static Property TagId = new Property(7, String.class, "tagId", false, "TAG_ID");
    }


    public MarkedDataDao(DaoConfig config) {
        super(config);
    }
    
    public MarkedDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARKED_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"KEY\" TEXT NOT NULL ," + // 1: key
                "\"TYPE\" TEXT," + // 2: type
                "\"REG_STR\" TEXT," + // 3: regStr
                "\"PUBLISH_USER_ID\" INTEGER," + // 4: publishUserId
                "\"VALUE\" TEXT," + // 5: value
                "\"FROM\" TEXT," + // 6: from
                "\"TAG_ID\" TEXT);"); // 7: tagId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MARKED_DATA_KEY ON \"MARKED_DATA\"" +
                " (\"KEY\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARKED_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MarkedData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getKey());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String regStr = entity.getRegStr();
        if (regStr != null) {
            stmt.bindString(4, regStr);
        }
 
        Long publishUserId = entity.getPublishUserId();
        if (publishUserId != null) {
            stmt.bindLong(5, publishUserId);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String tagId = entity.getTagId();
        if (tagId != null) {
            stmt.bindString(8, tagId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MarkedData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getKey());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String regStr = entity.getRegStr();
        if (regStr != null) {
            stmt.bindString(4, regStr);
        }
 
        Long publishUserId = entity.getPublishUserId();
        if (publishUserId != null) {
            stmt.bindLong(5, publishUserId);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String tagId = entity.getTagId();
        if (tagId != null) {
            stmt.bindString(8, tagId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MarkedData readEntity(Cursor cursor, int offset) {
        MarkedData entity = new MarkedData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // regStr
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // publishUserId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // value
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // from
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // tagId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MarkedData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRegStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPublishUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFrom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTagId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MarkedData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MarkedData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MarkedData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
