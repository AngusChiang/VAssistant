package cn.vove7.datamanager.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.vove7.datamanager.parse.statusmap.Reg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REG".
*/
public class RegDao extends AbstractDao<Reg, Long> {

    public static final String TABLENAME = "REG";

    /**
     * Properties of entity Reg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RegStr = new Property(1, String.class, "regStr", false, "REG_STR");
        public final static Property ParamPos = new Property(2, int.class, "paramPos", false, "PARAM_POS");
        public final static Property NodeId = new Property(3, long.class, "nodeId", false, "NODE_ID");
    }

    private Query<Reg> mapNode_RegsQuery;

    public RegDao(DaoConfig config) {
        super(config);
    }
    
    public RegDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REG_STR\" TEXT NOT NULL ," + // 1: regStr
                "\"PARAM_POS\" INTEGER NOT NULL ," + // 2: paramPos
                "\"NODE_ID\" INTEGER NOT NULL );"); // 3: nodeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Reg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getRegStr());
        stmt.bindLong(3, entity.getParamPos());
        stmt.bindLong(4, entity.getNodeId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Reg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getRegStr());
        stmt.bindLong(3, entity.getParamPos());
        stmt.bindLong(4, entity.getNodeId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Reg readEntity(Cursor cursor, int offset) {
        Reg entity = new Reg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // regStr
            cursor.getInt(offset + 2), // paramPos
            cursor.getLong(offset + 3) // nodeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Reg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRegStr(cursor.getString(offset + 1));
        entity.setParamPos(cursor.getInt(offset + 2));
        entity.setNodeId(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Reg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Reg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Reg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "regs" to-many relationship of MapNode. */
    public List<Reg> _queryMapNode_Regs(long nodeId) {
        synchronized (this) {
            if (mapNode_RegsQuery == null) {
                QueryBuilder<Reg> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.NodeId.eq(null));
                mapNode_RegsQuery = queryBuilder.build();
            }
        }
        Query<Reg> query = mapNode_RegsQuery.forCurrentThread();
        query.setParameter(0, nodeId);
        return query.list();
    }

}
