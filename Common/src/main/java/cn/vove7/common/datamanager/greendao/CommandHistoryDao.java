package cn.vove7.common.datamanager.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.vove7.common.datamanager.history.CommandHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMAND_HISTORY".
*/
public class CommandHistoryDao extends AbstractDao<CommandHistory, Long> {

    public static final String TABLENAME = "COMMAND_HISTORY";

    /**
     * Properties of entity CommandHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CommandText = new Property(1, String.class, "commandText", false, "COMMAND_TEXT");
        public final static Property CommandDate = new Property(2, java.util.Date.class, "commandDate", false, "COMMAND_DATE");
        public final static Property UserId = new Property(3, Long.class, "userId", false, "USER_ID");
    }


    public CommandHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public CommandHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMAND_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COMMAND_TEXT\" TEXT," + // 1: commandText
                "\"COMMAND_DATE\" INTEGER," + // 2: commandDate
                "\"USER_ID\" INTEGER);"); // 3: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMAND_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommandHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String commandText = entity.getCommandText();
        if (commandText != null) {
            stmt.bindString(2, commandText);
        }
 
        java.util.Date commandDate = entity.getCommandDate();
        if (commandDate != null) {
            stmt.bindLong(3, commandDate.getTime());
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommandHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String commandText = entity.getCommandText();
        if (commandText != null) {
            stmt.bindString(2, commandText);
        }
 
        java.util.Date commandDate = entity.getCommandDate();
        if (commandDate != null) {
            stmt.bindLong(3, commandDate.getTime());
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommandHistory readEntity(Cursor cursor, int offset) {
        CommandHistory entity = new CommandHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // commandText
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // commandDate
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommandHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommandText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCommandDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommandHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommandHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommandHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
