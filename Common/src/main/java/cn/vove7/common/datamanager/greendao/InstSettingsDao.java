package cn.vove7.common.datamanager.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.vove7.common.datamanager.InstSettings;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INST_SETTINGS".
*/
public class InstSettingsDao extends AbstractDao<InstSettings, Long> {

    public static final String TABLENAME = "INST_SETTINGS";

    /**
     * Properties of entity InstSettings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property DataJson = new Property(2, String.class, "dataJson", false, "DATA_JSON");
        public final static Property RawJson = new Property(3, String.class, "rawJson", false, "RAW_JSON");
        public final static Property From = new Property(4, String.class, "from", false, "FROM");
        public final static Property Version = new Property(5, int.class, "version", false, "VERSION");
    }


    public InstSettingsDao(DaoConfig config) {
        super(config);
    }
    
    public InstSettingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INST_SETTINGS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DATA_JSON\" TEXT," + // 2: dataJson
                "\"RAW_JSON\" TEXT," + // 3: rawJson
                "\"FROM\" TEXT," + // 4: from
                "\"VERSION\" INTEGER NOT NULL );"); // 5: version
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_INST_SETTINGS_NAME ON \"INST_SETTINGS\"" +
                " (\"NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INST_SETTINGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InstSettings entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String dataJson = entity.getDataJson();
        if (dataJson != null) {
            stmt.bindString(3, dataJson);
        }
 
        String rawJson = entity.getRawJson();
        if (rawJson != null) {
            stmt.bindString(4, rawJson);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(5, from);
        }
        stmt.bindLong(6, entity.getVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InstSettings entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String dataJson = entity.getDataJson();
        if (dataJson != null) {
            stmt.bindString(3, dataJson);
        }
 
        String rawJson = entity.getRawJson();
        if (rawJson != null) {
            stmt.bindString(4, rawJson);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(5, from);
        }
        stmt.bindLong(6, entity.getVersion());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InstSettings readEntity(Cursor cursor, int offset) {
        InstSettings entity = new InstSettings( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dataJson
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rawJson
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // from
            cursor.getInt(offset + 5) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InstSettings entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDataJson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRawJson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFrom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVersion(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InstSettings entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InstSettings entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InstSettings entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
