package cn.vove7.common.datamanager.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.vove7.common.datamanager.AppAdInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_AD_INFO".
*/
public class AppAdInfoDao extends AbstractDao<AppAdInfo, Long> {

    public static final String TABLENAME = "APP_AD_INFO";

    /**
     * Properties of entity AppAdInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DescTitle = new Property(1, String.class, "descTitle", false, "DESC_TITLE");
        public final static Property Pkg = new Property(2, String.class, "pkg", false, "PKG");
        public final static Property Activity = new Property(3, String.class, "activity", false, "ACTIVITY");
        public final static Property Texts = new Property(4, String.class, "texts", false, "TEXTS");
        public final static Property ViewId = new Property(5, String.class, "viewId", false, "VIEW_ID");
        public final static Property Descs = new Property(6, String.class, "descs", false, "DESCS");
        public final static Property VersionCode = new Property(7, Integer.class, "versionCode", false, "VERSION_CODE");
    }


    public AppAdInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppAdInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_AD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DESC_TITLE\" TEXT," + // 1: descTitle
                "\"PKG\" TEXT," + // 2: pkg
                "\"ACTIVITY\" TEXT," + // 3: activity
                "\"TEXTS\" TEXT," + // 4: texts
                "\"VIEW_ID\" TEXT," + // 5: viewId
                "\"DESCS\" TEXT," + // 6: descs
                "\"VERSION_CODE\" INTEGER);"); // 7: versionCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_AD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppAdInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String descTitle = entity.getDescTitle();
        if (descTitle != null) {
            stmt.bindString(2, descTitle);
        }
 
        String pkg = entity.getPkg();
        if (pkg != null) {
            stmt.bindString(3, pkg);
        }
 
        String activity = entity.getActivity();
        if (activity != null) {
            stmt.bindString(4, activity);
        }
 
        String texts = entity.getTexts();
        if (texts != null) {
            stmt.bindString(5, texts);
        }
 
        String viewId = entity.getViewId();
        if (viewId != null) {
            stmt.bindString(6, viewId);
        }
 
        String descs = entity.getDescs();
        if (descs != null) {
            stmt.bindString(7, descs);
        }
 
        Integer versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindLong(8, versionCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppAdInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String descTitle = entity.getDescTitle();
        if (descTitle != null) {
            stmt.bindString(2, descTitle);
        }
 
        String pkg = entity.getPkg();
        if (pkg != null) {
            stmt.bindString(3, pkg);
        }
 
        String activity = entity.getActivity();
        if (activity != null) {
            stmt.bindString(4, activity);
        }
 
        String texts = entity.getTexts();
        if (texts != null) {
            stmt.bindString(5, texts);
        }
 
        String viewId = entity.getViewId();
        if (viewId != null) {
            stmt.bindString(6, viewId);
        }
 
        String descs = entity.getDescs();
        if (descs != null) {
            stmt.bindString(7, descs);
        }
 
        Integer versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindLong(8, versionCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppAdInfo readEntity(Cursor cursor, int offset) {
        AppAdInfo entity = new AppAdInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // descTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pkg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // activity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // texts
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // viewId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // descs
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // versionCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppAdInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPkg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActivity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTexts(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setViewId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescs(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVersionCode(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppAdInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppAdInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppAdInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
