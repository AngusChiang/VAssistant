package cn.vove7.common.datamanager.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.vove7.common.datamanager.executor.entity.MarkedContact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARKED_CONTACT".
*/
public class MarkedContactDao extends AbstractDao<MarkedContact, Long> {

    public static final String TABLENAME = "MARKED_CONTACT";

    /**
     * Properties of entity MarkedContact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property RegexStr = new Property(2, String.class, "regexStr", false, "REGEX_STR");
        public final static Property ContactName = new Property(3, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property From = new Property(5, String.class, "from", false, "FROM");
    }


    public MarkedContactDao(DaoConfig config) {
        super(config);
    }
    
    public MarkedContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARKED_CONTACT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"KEY\" TEXT NOT NULL ," + // 1: key
                "\"REGEX_STR\" TEXT," + // 2: regexStr
                "\"CONTACT_NAME\" TEXT," + // 3: contactName
                "\"PHONE\" TEXT NOT NULL ," + // 4: phone
                "\"FROM\" TEXT);"); // 5: from
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MARKED_CONTACT_KEY ON \"MARKED_CONTACT\"" +
                " (\"KEY\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARKED_CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MarkedContact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getKey());
 
        String regexStr = entity.getRegexStr();
        if (regexStr != null) {
            stmt.bindString(3, regexStr);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(4, contactName);
        }
        stmt.bindString(5, entity.getPhone());
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(6, from);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MarkedContact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getKey());
 
        String regexStr = entity.getRegexStr();
        if (regexStr != null) {
            stmt.bindString(3, regexStr);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(4, contactName);
        }
        stmt.bindString(5, entity.getPhone());
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(6, from);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MarkedContact readEntity(Cursor cursor, int offset) {
        MarkedContact entity = new MarkedContact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // regexStr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contactName
            cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // from
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MarkedContact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.getString(offset + 1));
        entity.setRegexStr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContactName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.getString(offset + 4));
        entity.setFrom(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MarkedContact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MarkedContact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MarkedContact entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
